/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package binance_tarder;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.io.*;
import java.net.*;
import java.nio.charset.*;
import org.json.JSONObject;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.JFrame;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author G0041901
 */
public class binance_trader extends javax.swing.JFrame {
    
    private static final long serialVersionUID = 1L;
    /**
     * Creates new form binance_trader
     */
    public binance_trader() {
        
        initComponents();
        moeda = new Moeda(cbxComboCriptomoeda.getSelectedItem().toString());
        txtPrecoInicial.setText(String.valueOf(moeda.getPrecoUltima()));
        this.setTitle("Binance Trader");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        lbltempo = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtaTerminalExecucao = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();
        cbxIntervaloFrequencia = new javax.swing.JComboBox<String>();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        txtPrecoInicial = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtPercentualAcao = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pnlGrafico = new javax.swing.JPanel();
        cbxComboCriptomoeda = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtaTerminalHistorico = new javax.swing.JTextPane();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton2.setText("START");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        lbltempo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jScrollPane2.setViewportView(txtaTerminalExecucao);

        jLabel3.setText("Intervalo (Tempo):");
        jLabel3.setToolTipText("Intervalo em que se repetirá a tarefa. Ex: a cada 30 min.");

        cbxIntervaloFrequencia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01 min", "05 min", "10 min", "15 min", "30 min", "1 h", "2 h", "6 h", "12 h", "24 h" }));
        cbxIntervaloFrequencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxIntervaloFrequenciaActionPerformed(evt);
            }
        });

        jButton1.setText("EXECUTAR COMPRA / ALTA");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("EXECITAR VENDA / BAIXA");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        txtPrecoInicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecoInicialActionPerformed(evt);
            }
        });

        jLabel1.setText("Preço da Entrada");

        txtPercentualAcao.setText("3");

        jLabel4.setText("Variação + -");

        jLabel5.setText("%");

        pnlGrafico.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cbxComboCriptomoeda.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BTC", "ETH" }));

        jScrollPane3.setViewportView(txtaTerminalHistorico);

        jLabel6.setText("Criptomoeda");
        jLabel6.setToolTipText("Intervalo em que se repetirá a tarefa. Ex: a cada 30 min.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lbltempo, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cbxIntervaloFrequencia, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbxComboCriptomoeda, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPrecoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtPercentualAcao, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3))
                    .addComponent(pnlGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(lbltempo, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxIntervaloFrequencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxComboCriptomoeda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrecoInicial)
                    .addComponent(txtPercentualAcao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(pnlGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String teste = "NOK";
       
        if(txtPrecoInicial.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Preencha o campo Preço inicial.");
        }else{
            if(txtPercentualAcao.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Preencha o campo % Executar Ação +-.");
            }else{
                teste = "OK";
            }
        }
        
        if(teste.equals("OK")){
            moeda = new Moeda(cbxComboCriptomoeda.getSelectedItem().toString());
            txtPrecoInicial.setText(String.valueOf(moeda.getPrecoUltima()));
            moeda.executaPrimeiraAcao("Compra", txtPrecoInicial.getText().replace(",", "."),  txtPercentualAcao.getText().replace(",", "."));
            String texto = "Iniciado em "+getDataAtual()+"\nIntervalo de Atualização: "+cbxIntervaloFrequencia.getSelectedItem().toString()+"\n\n";
            tempoUltimaExecucao = 0;
            txtaTerminalExecucao.setText(txtaTerminalExecucao.getText()+texto);
            if(timer.getStatus()){
                timer.restart();
            }else{
                timer.init();
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cbxIntervaloFrequenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxIntervaloFrequenciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxIntervaloFrequenciaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String teste = "NOK";
        
        if(txtPrecoInicial.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Preencha o campo Preço inicial.");
        }else{
            if(txtPercentualAcao.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Preencha o campo % Executar Ação +-.");
            }else{
                teste = "OK";
            }
        }
        
        if(teste.equals("OK")){
            moeda = new Moeda(cbxComboCriptomoeda.getSelectedItem().toString());
            //txtPrecoInicial.setText(String.valueOf(moeda.getPrecoUltima()));
            moeda.executaCompra(txtPrecoInicial.getText().replace(",", "."),  txtPercentualAcao.getText().replace(",", "."));
            String texto = "Compra em "+getDataAtual()+"\nIntervalo de Atualização: "+cbxIntervaloFrequencia.getSelectedItem().toString()+"\n\n";
            if(!texto.equals("")){
                txtaTerminalExecucao.setText(txtaTerminalExecucao.getText()+texto);        
            }
            if(timer.getStatus()){
                timer.restart();
            }else{
                timer.init();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String teste = "NOK";
        if(txtPrecoInicial.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Preencha o campo Preço inicial.");
        }else{
            if(txtPercentualAcao.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Preencha o campo % Executar Ação +-.");
            }else{
                teste = "OK";
            }
        }
        
        if(teste.equals("OK")){
            moeda = new Moeda(cbxComboCriptomoeda.getSelectedItem().toString());
            //txtPrecoInicial.setText(String.valueOf(moeda.getPrecoUltima()));
            moeda.executaVenda(txtPrecoInicial.getText().replace(",", "."),  txtPercentualAcao.getText().replace(",", "."));
            String texto = "Venda em "+getDataAtual()+"\nIntervalo de Atualização: "+cbxIntervaloFrequencia.getSelectedItem().toString()+"\n\n";
            if(!texto.equals("")){
                txtaTerminalExecucao.setText(txtaTerminalExecucao.getText()+texto);        
            }
            if(timer.getStatus()){
                timer.restart();
            }else{
                timer.init();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void txtPrecoInicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecoInicialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecoInicialActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(binance_trader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(binance_trader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(binance_trader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(binance_trader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                binance_trader janela = new binance_trader();
                janela.setVisible(true);
                janela.setResizable(false);
                janela.setTitle("Trader Robô");
                janela.setLocationRelativeTo(null);
            }
        });
    }
    
    
    public class startObservador implements ActionListener{
        
        public Timer timer = new Timer(1000, this);;


        int hora;
        int min;
        int seg;
        
        int contador_minutos;
    
        public startObservador(int delay) {
            hora = 0;
            min = 0;
            seg = 0;
        }
    
        public void init() {
            lbltempo.setText(hora+":"+min+":"+seg);
            timer = new Timer(1000, this);
            timer.start();

        }
    
        public void restart(){
            lbltempo.setText(hora+":"+min+":"+seg);
            timer.restart();
        }
    
        public void stop() {
            timer.stop();

            lbltempo.setText("");
        }
    
        public boolean getStatus(){
            if(timer.isRunning())
                return true;
            else
                return false;
        }
    
        public void actionPerformed(final ActionEvent e) {
            seg++;
            if(seg==60){
                min++;
                seg=0;
                contador_minutos++;
            }
            if(min==60){
                hora++;
                min=0;
            }

            lbltempo.setText(hora+":"+min+":"+seg);

            String texto = executarTarefa(contador_minutos);

            /*if(!texto.equals("")){
                txtaTerminalExecucao.setText(txtaTerminalExecucao.getText()+texto);        
            }*/
        }
    
        public String executarTarefa(int tempoExecucaoAtual){

            if(contadorExecucao == 0){
                executaPrimeiraTarefa();
                contadorExecucao++;
                txtaTerminalHistorico.setText(txtaTerminalHistorico.getText()+contadorExecucao+" | "+getHoraAtual()+" | "+moeda.getPrecoUltima()+" | "+df.format(moeda.getVariacaoValor())+" | "+moeda.getVolume()+" | "+df.format(moeda.getVariacaoVolume())+"\n");
            }

            if(tempoUltimaExecucao+getIntervalo(cbxIntervaloFrequencia.getSelectedItem().toString())==tempoExecucaoAtual){

                contadorExecucao++;

                tempoUltimaExecucao = tempoExecucaoAtual;

                String resp = moeda.acao();

                gravaDadosGrafico(moeda.getData(), moeda.getPrecoMaximo(), moeda.getPrecoMinimo(), moeda.getPrecoAbertura(), moeda.getPrecoUltima(), moeda.getVolume());

                atualizarPnlGrafico(grafico.configJanelaGrafico(getDataSet(),moeda.getNomeCriptomoeda()));

                if(!resp.equals("não atuar"))
                    enviaTelegram(resp);

                //proximaExecucao = getDataAgendada(intervalo);

                txtaTerminalHistorico.setText(txtaTerminalHistorico.getText()+contadorExecucao+" | "+getHoraAtual()+" | "+moeda.getPrecoUltima()+" | "+df.format(moeda.getVariacaoValor())+" | "+moeda.getVolume()+" | "+df.format(moeda.getVariacaoVolume())+"\n");

                return "Tarefa executada com sucesso em "+getDataAtual()+"\nPróxima execução prevista para "+proximaExecucao+"\nÚltima Ação: "+moeda.getUltimaAcao()+" | Spread: "+df.format(moeda.getSpread())+" | Média Móvel: "+moeda.getMediaMovel()+"\nPreço Última Ação: "+moeda.getValorUltimaAcao()+" | Preço Atual: "+moeda.getPrecoUltima()+" | Diferença: "+df.format(((moeda.getPrecoUltima()-moeda.getValorUltimaAcao())/moeda.getValorUltimaAcao()))+"\n\n";

            }else{

                return "";

            }
        }
    
    }
    
    public void executaPrimeiraTarefa(){
        
        String resp = moeda.acao();
            
        gravaDadosGrafico(moeda.getData(), moeda.getPrecoMaximo(), moeda.getPrecoMinimo(), moeda.getPrecoAbertura(), moeda.getPrecoUltima(), moeda.getVolume());
            
        atualizarPnlGrafico(grafico.configJanelaGrafico(getDataSet(),moeda.getNomeCriptomoeda()));
        
    }
    
    public String getDataAgendada(String tempo){
        
        GregorianCalendar c = new GregorianCalendar();
        c.setTime(new Date());
        switch(tempo){
            case "01 min":
                c.add(Calendar.MINUTE,1);
            break;
            case "05 min":
                c.add(Calendar.MINUTE,5);
            break;
            case "10 min":
                c.add(Calendar.MINUTE,10);
            break;
            case "15 min":
                c.add(Calendar.MINUTE,15);
            break;
            case "30 min":
                c.add(Calendar.MINUTE,30);
            break;
            case "1 h":
                c.add(Calendar.MINUTE,60);
            break;
            case "2 h":
                c.add(Calendar.MINUTE,120);
            break;
            case "6 h":
                c.add(Calendar.MINUTE,360);
            break;
            case "12 h":
                c.add(Calendar.MINUTE,720);
            break;
            case "24 h":
                c.add(Calendar.MINUTE,1440);
            break;
        }
        
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        return sdf.format(c.getTime());
        
    }
    
    public int getIntervalo(String tempo){
         
        int tempoAgendado = 0;
        switch(tempo){
            case "01 min":
               tempoAgendado = 1;
            break;
            case "05 min":
                tempoAgendado = 5;
            break;
            case "10 min":
                tempoAgendado = 10;
            break;
            case "15 min":
                tempoAgendado = 15;
            break;
            case "30 min":
                tempoAgendado = 30;
            break;
            case "1 h":
                tempoAgendado = 60;
            break;
            case "2 h":
                tempoAgendado = 120;
            break;
            case "6 h":
                tempoAgendado = 360;
            break;
            case "12 h":
                tempoAgendado = 720;
            break;
            case "24 h":
                tempoAgendado = 1440;
            break;
        }
        return tempoAgendado;
    }
    
    public String getDataAtual(){
        
        GregorianCalendar c = new GregorianCalendar();
        c.setTime(new Date());
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        
        return sdf.format(c.getTime());
        
    }
    
    public String getHoraAtual(){
        
        GregorianCalendar c = new GregorianCalendar();
        c.setTime(new Date());
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
        
        return sdf.format(c.getTime());
        
    }
    
    public void enviaTelegram(String resp){
        
        String url = "https://api.telegram.org/bot5416804395:AAES3i4NQKEwdsti1vFGwkMjFxGuXa78f1k/sendMessage?chat_id=-722850872&text=";
        URL obj = null;
        url = url+resp;
        try {
            obj = new URL(url);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            con.setRequestMethod("GET");
            int responseCode = con.getResponseCode();
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuffer response = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
               response.append(inputLine);
            }
            in.close();       
        } catch (Exception ex) {
            Logger.getLogger(binance_trader.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    public void gravaDadosGrafico(Date data, double high, double low, double open, double close, double volume){
       
        dados.setDataArray(data);
        dados.setHighArray(high);
        dados.setLowArray(low);
        dados.setOpenArray(open);
        dados.setCloseArray(close);
        dados.setVolumeArray(volume);
        dados.setMenorPrecoRegistrado(close);
        
    }
    
    public XYSeriesCollection getDataSet(){
        
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(dados.getCloseArrayDescontado());        
        return dataset;
        
    }
    
    public void atualizarPnlGrafico(ChartPanel grafico){
        
        pnlGrafico.removeAll();
        pnlGrafico.add(grafico, BorderLayout.CENTER);
        pnlGrafico.repaint();
        
    }
    
    Thread threadRobo;
    String proximaExecucao = "primeira";
    EuRobo robo = new EuRobo();
    final startObservador timer = new startObservador(500);
    private Moeda moeda;
    ArrayList<Float> lista = new ArrayList();
    JanelaGrafico grafico = new JanelaGrafico();
    DefaultHighLowDataset dataSet;
    Dados dados = new Dados();
    private int tempoExecucaoAtual = 0;
    private int tempoUltimaExecucao = 0;
    private int contadorExecucao = 0;
    DecimalFormat df = new DecimalFormat("#.##%");
    DecimalFormat dfv = new DecimalFormat("#.##");
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbxComboCriptomoeda;
    private javax.swing.JComboBox<String> cbxIntervaloFrequencia;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbltempo;
    private javax.swing.JPanel pnlGrafico;
    private javax.swing.JTextField txtPercentualAcao;
    private javax.swing.JTextField txtPrecoInicial;
    private javax.swing.JTextPane txtaTerminalExecucao;
    private javax.swing.JTextPane txtaTerminalHistorico;
    // End of variables declaration//GEN-END:variables
}
